generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  Game          Game[]
  accounts      account[]
  sessions      session[]

  @@map("user")
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  timeStarted DateTime   @default(now())
  topic       String
  timeEnded   DateTime?
  gameType    GameType
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]

  @@map("game")
}

model topic_count {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}

model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  gameId            String
  options           String?
  percentageCorrect Float?
  isCorrect         Boolean?
  questionType      GameType
  userAnswer        String?
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("question")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum GameType {
  mcq
  open_ended
}
